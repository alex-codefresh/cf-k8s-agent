# serviceType type of the service, set to LoadBalancer to expose the ip when there is not ingress
serviceType: ClusterIP

# replicaCount number of pods to be schedualed
replicaCount: 1

## imagePullPolicy 'Always' if imageTag is 'latest', else set to 'IfNotPresent' ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
imagePullPolicy: Always

# redeploy whenever to force redeploy
redeploy: false

# imageTag set the tag of the image
imageTag: v1

# image name, takes from variable
image:  "codefresh/agent"

# env set of evnrionment varialbe to be add to the containers
#env:

# clusterUrl - optional. for setup outside cluster when current context is used
# clusterToken - optional. for setup outside cluster when current context is used
# clusterCA - optional. for setup outside cluster when current context is used
# apiToken - should be set when the chart is installing
# clusterId - cluster name as it registered in account
# useCurrentContext - use current context instead of cluster credentials. False by default.
apiUrl: https://g.codefresh.io/api/k8s-monitor/events
clusterId: clusterName
clusterUrl: ""
clean: false

# port container port
port: 80

# servicePort port of the kubernetes service listen to
servicePort: 80

accountId: user
apiToken: ""

ingress:
  enabled: true
  path: /api/k8s-monitor/

  # Used to create an Ingress record
  annotations:
    # GCE Ingress Controller
    # kubernetes.io/ingress.class: "gce"
    # Nginx Ingress controller (default)
    kubernetes.io/ingress.class: nginx-codefresh
    nginx.ingress.kubernetes.io/proxy-body-size: 10m
